#version 330
uniform mat4 MVP;
uniform int outline;
uniform float screen_width_ratio;

in vec2 vTexCoord;
in vec2 vPos;

out vec2 texCoord;
out vec2 fragPos;
out vec2 borderCoord;
out vec2 cutOff;

void main()
{

    	float border_width = 0.01f * outline;

	// center of the box in ndc
	vec4 center = MVP * vec4( 0.0, 0.0, 0.0, 1.0);

	// box vertex in ndc (with after all transformations)
    	vec4 pos = MVP * vec4( vPos.x, vPos.y , 0.0, 1.0) ;

	// box local axis directions in ndc
	vec4 box_halfwidth_pos = MVP * vec4(vPos.x , 0.0, 0.0, 1.0 ) - center;
	vec4 box_halfheight_pos = MVP * vec4(0.0,  vPos.y, 0.0, 1.0 ) - center;	

	// box normals of the edges adiacent to the current vertex
	vec2 normal_x = normalize( vec2(box_halfwidth_pos.x, box_halfwidth_pos.y ));
	vec2 normal_y = normalize( vec2(box_halfheight_pos.x, box_halfheight_pos.y ));

	vec2 explodedNormal = normalize( normal_x + normal_y ) * border_width;
	explodedNormal.x = explodedNormal.x / screen_width_ratio;
	
    	vec4 tmp_gl_pos = vec4( pos.x + explodedNormal.x , pos.y + explodedNormal.y , 0.0, 1.0 );
	
	box_halfwidth_pos.x = box_halfwidth_pos.x * screen_width_ratio;
	box_halfheight_pos.x = box_halfheight_pos.x * screen_width_ratio;
	borderCoord = vec2( (length(box_halfwidth_pos ) + border_width ) / length(box_halfwidth_pos) * sign(vPos.x)  ,
			    (length(box_halfheight_pos) + border_width ) / length(box_halfheight_pos) * sign(vPos.y) );

    	texCoord = vTexCoord;

	gl_Position = tmp_gl_pos;

}

void FAVAFAVAmain()
{

    	float border_width = 0.1f * outline;

	// center of the box in ndc
	vec4 center = MVP * vec4( 0.0, 0.0, 0.0, 1.0);

	// box vertex in ndc (with after all transformations)
    	vec4 pos = MVP * vec4( vPos.x, vPos.y , 0.0, 1.0) ;

	// box local axis directions in ndc
	vec4 local_x_axis = MVP * vec4(1.0 , 0.0, 0.0, 1.0 ) - center;
	vec4 local_y_axis = MVP * vec4(0.0,  1.0, 0.0, 1.0 ) - center;	

	// box normals of the edges adiacent to the current vertex
	vec2 normal_x = normalize( vec2(local_x_axis.x, local_x_axis.y ) * sign(vPos.x) );
	vec2 normal_y = normalize( vec2(local_y_axis.x, local_y_axis.y ) * sign(vPos.y) );

	vec2 explodedNormal = normalize( normal_x + normal_y ) * border_width;
	explodedNormal.x = explodedNormal.x / screen_width_ratio;
	
    	vec4 tmp_gl_pos = vec4( pos.x + explodedNormal.x , pos.y + explodedNormal.y , 0.0, 1.0 );

	// FINO QUA FUNZIONA
	
	// Applica all'origine del sistema ndc i vettori exploded e normali del vertice corrente
	vec2 exploded_pos_vector = vec2(tmp_gl_pos.x - center.x , tmp_gl_pos.y - center.y ) * 100;
	vec2 pos_vector = vec2( pos.x - center.x , pos.y - center.y );

	vec2 dir_pos_vector = normalize(pos_vector);
	

	// OLD
	vec2 l_x_axis = vec2(local_x_axis.x, local_x_axis.y);
	vec2 l_y_axis = normalize(vec2(local_y_axis.x, local_y_axis.y));
	//l_x_axis.x = l_x_axis.x / screen_width_ratio;
	//l_y_axis.x = l_y_axis.x / screen_width_ratio;

	// Coordinate dei vertici rispetto ad un sistema di riferimento con lo stesso orientamento
	// di quello originale.
	// Teoricamente ste coordinate dovrebbero essere COSTANTI: per ogni vertice sono sempre le stesse!
	float exploded_x_dist = l_x_axis.x * exploded_pos_vector.x + l_x_axis.y * exploded_pos_vector.y;
	float exploded_y_dist = l_y_axis.x * exploded_pos_vector.x + l_y_axis.y * exploded_pos_vector.y;
	float normal_x_dist = normal_x.x * pos_vector.x + normal_x.y * pos_vector.y; 
	float normal_y_dist = dot(l_y_axis, pos_vector);

	borderCoord = vec2( sign(normal_x_dist) * sign(vPos.x) , 0  ); 
	//borderCoord = vec2(exploded_x_dist / abs(exploded_x_dist), exploded_y_dist / abs(exploded_y_dist));
	//borderCoord = vec2( l_y_axis.x  , l_y_axis.y );
	//borderCoord = vec2( pos_vector.x  , pos_vector.y );
	//borderCoord = local_x_axis * sign(vPos.x) + local_y_axis * sign(vPos.y);
	//borderCoord = vec2(exploded_x_dist / abs(exploded_x_dist), exploded_y_dist / abs(exploded_y_dist));
	//cutOff = vec2( normal_x_dist , normal_y_dist  );

	//borderCoord = vec2( exploded_x_dist / normal_x_dist * sign(vPos.x), exploded_y_dist / normal_y_dist * sign(vPos.y) );   
 	//borderCoord = vec2( 1.2 * sign(vPos.x), 1.2 * sign(vPos.y) );
		
	// Invece di 1.2, devo associare un valore, sempre costante, che però fa in modo tale da
	// creare una linea di livello in cui l'1 è presente nei vertici del box originale NON esploso
	// Che valore posso usare?
	//float constCutoffx = abs(exploded_x_dist / normal_x_dist);
	//float constCutoffy = abs(exploded_y_dist / normal_y_dist);
	//borderCoord = vec2( (exploded_x_dist) / abs(exploded_x_dist) * sign(vPos.x), 1.2 * sign(vPos.y) );
	//borderCoord = vec2(exploded_x_dist / abs(exploded_x_dist) , 0);
	
    	texCoord = vTexCoord;

	gl_Position = tmp_gl_pos;

}

void OOOLDmain()
{

    	float border_width = 0.01f * outline;

	mat4 ExplodedMVP = MVP;
	ExplodedMVP[3][0] = ExplodedMVP[3][0] + sign(vPos.x) * border_width / screen_width_ratio;
	ExplodedMVP[3][1] = ExplodedMVP[3][1] + sign(vPos.y) * border_width;

    	gl_Position = ExplodedMVP * vec4( vPos , 0.0, 1.0 );
	gl_Position.z = - outline * 0.5;
	vec4 normalPos = MVP * vec4( vPos, 0.0, 1.0);
	vec4 centerPos = MVP * vec4( 0.0, 0.0, 0.0, 1.0);
	
	vec2 exploded_vector = vec2(gl_Position.x - centerPos.x, gl_Position.y - centerPos.y);
	vec2 normal_vector = vec2( normalPos.x - centerPos.x, normalPos.y - centerPos.y );

	vec4 local_x_axisT = MVP * vec4( 1.0, 0.0, 0.0, 1.0) - centerPos;
	vec4 local_y_axisT = MVP * vec4( 0.0, 1.0, 0.0, 1.0) - centerPos;
	vec2 local_x_axis = normalize(vec2(local_x_axisT.x, local_x_axisT.y));
	vec2 local_y_axis = normalize(vec2(local_y_axisT.x, local_y_axisT.y));


	float exploded_x_dist = dot(local_x_axis, exploded_vector);
	float exploded_y_dist = dot(local_y_axis, exploded_vector);
	float normal_x_dist = dot(local_x_axis, normal_vector);
	float normal_y_dist = dot(local_y_axis, normal_vector);

	borderCoord = vec2( exploded_x_dist / normal_x_dist, exploded_y_dist / normal_y_dist );


    	texCoord = vTexCoord;

}

void oldmain()
{

    	float border_width = 0.1f * outline;

    	gl_Position = MVP * vec4( vPos , 0.0, 1.0);
	vec4 explodedXPos = MVP * vec4(vPos.x +  sign(vPos.x) * 2.0, vPos.y, 0.0, 1.0 );
	vec4 explodedYPos = MVP * vec4(vPos.x, vPos.y +  sign(vPos.y) * 2.0, 0.0, 1.0 );	

    	vec2 normal_y = normalize( vec2( explodedYPos.x - gl_Position.x, explodedYPos.y - gl_Position.y) ) * border_width ;
	vec2 normal_x = normalize( vec2( explodedXPos.x - gl_Position.x, explodedXPos.y - gl_Position.y) ) * border_width ;
	gl_Position = vec4( gl_Position.x + normal_x.x, gl_Position.y, gl_Position.z, 1.0 );

	//vec2 normal_y = normalize( vec2( explodedYPos.x - gl_Position.x, explodedYPos.y - gl_Position.y) );
	//vec2 explodedNormal = normalize( normal_x + normal_y ) * 0.4f * outline;
	
    	//gl_Position = vec4( gl_Position.x + explodedNormal.x, gl_Position.y + explodedNormal.y , gl_Position.z, 1.0 );
    
    	texCoord = vTexCoord;

}


void oldoldmain(){
	

    float border_width = 0.4f * outline;

    vec2 exploded_pos = vec2(vPos.x +  sign(vPos.x) * border_width, vPos.y +  sign(vPos.y) * border_width );

    gl_Position = MVP * vec4( exploded_pos , 0.0, 1.0);

    borderCoord = vec2(exploded_pos.x / abs(vPos.x), exploded_pos.y / abs(vPos.y));
    
    texCoord = vTexCoord;

}

void oldoldoldmain(){
	float border_width = 0.1f * outline;
	borderCoord = vec2((vPos.x +  vPos.x / abs(vPos.x) * border_width) / vPos.x, (vPos.y / abs(vPos.y) * border_width) / vPos.y );
	fragPos = vPos +  normalize(vPos);
}

